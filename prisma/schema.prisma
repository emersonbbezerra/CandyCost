// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  firstName       String?
  lastName        String?
  profileImageUrl String?
  role            String   @default("user")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("users")
}

model Session {
  sid    String   @id
  sess   String
  expire DateTime

  @@index([expire])
  @@map("sessions")
}

model Ingredient {
  id        String   @id @default(cuid())
  name      String
  category  String
  quantity  Float
  unit      String
  price     Float
  brand     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes      Recipe[]       @relation("IngredientRecipes")
  priceHistory PriceHistory[]

  @@map("ingredients")
}

model Product {
  id                     String   @id @default(cuid())
  name                   String
  category               String
  description            String?
  isAlsoIngredient       Boolean  @default(false)
  marginPercentage       Float
  preparationTimeMinutes Int?
  salePrice              Float // Preço de venda total do produto
  yield                  Float // Rendimento total do produto
  yieldUnit              String // Unidade do rendimento (ex: unidade, kg, fatia)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  recipes                  Recipe[]       @relation("ProductRecipes")
  productIngredientRecipes Recipe[]       @relation("ProductIngredientRecipes")
  priceHistory             PriceHistory[]

  @@map("products")
}

model Recipe {
  id       String @id @default(cuid())
  quantity Float
  unit     String

  productId String
  product   Product @relation("ProductRecipes", fields: [productId], references: [id], onDelete: Cascade)

  ingredientId String?
  ingredient   Ingredient? @relation("IngredientRecipes", fields: [ingredientId], references: [id], onDelete: Cascade)

  productIngredientId String?
  productIngredient   Product? @relation("ProductIngredientRecipes", fields: [productIngredientId], references: [id], onDelete: Cascade)

  @@map("recipes")
}

model FixedCost {
  id          String   @id @default(cuid())
  name        String
  category    String
  value       Float
  recurrence  String // 'monthly', 'yearly', 'weekly', 'daily'
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fixed_costs")
}

model PriceHistory {
  id          String   @id @default(cuid())
  itemType    String // 'ingredient' or 'product'
  itemName    String
  oldPrice    Float
  newPrice    Float
  changeType  String // 'manual', 'ingredient_update'
  description String?
  createdAt   DateTime @default(now())

  ingredientId String?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model WorkConfiguration {
  id                          String   @id @default(cuid())
  hoursPerDay                 Float    @default(8.0)
  // Campos antigos mantidos para compatibilidade (serão removidos futuramente)
  daysPerMonth                Float    @default(22.0)
  hourlyRate                  Float    @default(25.0)
  highCostAlertThreshold      Float    @default(50.0)
  currencySymbol              String   @default("R$")
  enableCostAlerts            Boolean  @default(true)
  enablePriceAlerts           Boolean  @default(true)
  defaultMarginPercentage     Float    @default(60.0)
  priceIncreaseAlertThreshold Float    @default(20.0)
  businessName                String   @default("Minha Confeitaria")
  // Novos campos para o sistema de dias da semana
  workMonday                  Boolean  @default(true)
  workTuesday                 Boolean  @default(true)
  workWednesday               Boolean  @default(true)
  workThursday                Boolean  @default(true)
  workFriday                  Boolean  @default(true)
  workSaturday                Boolean  @default(false)
  workSunday                  Boolean  @default(false)
  // Campos calculados (atualizados automaticamente)
  annualWorkingDays           Int      @default(261) // ~261 dias úteis/ano (seg-sex)
  annualWorkingHours          Float    @default(2088.0) // 261 * 8h
  monthlyWorkingHours         Float    @default(174.0) // 2088 / 12
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("work_configuration")
}
