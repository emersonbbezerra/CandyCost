
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  firstName        String?
  lastName         String?
  profileImageUrl  String?
  role             String   @default("user")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("users")
}

model Session {
  id      String @id
  sid     String @unique
  data    String
  expires DateTime

  @@index([expires])
  @@map("sessions")
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String
  category    String
  quantity    Float
  unit        String
  price       Float
  brand       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recipes     Recipe[] @relation("IngredientRecipes")
  priceHistory PriceHistory[]

  @@map("ingredients")
}

model Product {
  id                      String   @id @default(cuid())
  name                    String
  category                String
  description             String?
  isAlsoIngredient        Boolean  @default(false)
  marginPercentage        Float
  preparationTimeMinutes  Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  recipes                 Recipe[] @relation("ProductRecipes")
  productIngredientRecipes Recipe[] @relation("ProductIngredientRecipes")
  priceHistory            PriceHistory[]

  @@map("products")
}

model Recipe {
  id                  String  @id @default(cuid())
  quantity            Float
  unit                String

  productId           String
  product             Product @relation("ProductRecipes", fields: [productId], references: [id], onDelete: Cascade)

  ingredientId        String?
  ingredient          Ingredient? @relation("IngredientRecipes", fields: [ingredientId], references: [id], onDelete: Cascade)

  productIngredientId String?
  productIngredient   Product? @relation("ProductIngredientRecipes", fields: [productIngredientId], references: [id], onDelete: Cascade)

  @@map("recipes")
}

model FixedCost {
  id          String   @id @default(cuid())
  name        String
  category    String
  value       Float
  recurrence  String   // 'monthly', 'yearly', 'weekly', 'daily'
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fixed_costs")
}

model PriceHistory {
  id          String   @id @default(cuid())
  itemType    String   // 'ingredient' or 'product'
  itemName    String
  oldPrice    Float
  newPrice    Float
  changeType  String   // 'manual', 'ingredient_update'
  description String?
  createdAt   DateTime @default(now())

  ingredientId String?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  productId    String?
  product      Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model WorkConfiguration {
  id                     String   @id @default(cuid())
  hoursPerDay            Float    @default(8.0)
  daysPerMonth           Float    @default(22.0)
  hourlyRate             Float    @default(25.0)
  highCostAlertThreshold Float    @default(50.0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("work_configuration")
}
